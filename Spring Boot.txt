*************************************************Spring Boot +Hibernate+jsp*********************************************************************************************************

+-------+          +-------+           +-------+
|       |--------->|spring |--------->|hibernate|
|Angular|          |boot   |           |       |
|       |          |       |           |       |
+-------+          +-------+           +-------+
View                controller          model

********************************************************************************************************************************************************************************************
+-----------------------------+
|     Spring IoC Container    |
|-----------------------------|
|  1. Create Beans            |
|  2. Inject Dependencies     |
|  3. Manage Bean Lifecycle   |
+-----------------------------+
********************************************************************************************************************************************************************************************

ORM-object relation mapping-it is nothing but setting value in db and getting value from db is known as ORM

normal object creating---> A a = new A();
spring object creating---> @Autowired
                           private A a;

@Entity--->Hibernate class (H)
@Autowired--->(S)Autowired annotation trigger spring IOC it will create bean and inject dependencies and maintains life cycle of bean

***Interview
What if i only using hibernate to perform CRUD operation?

step1: add hibernate dependencies
step2: create (hibernate.cfg.xml) it contains properties like database,classname ect
step3: entity class
step4: create utility class to handle session factory
***Session factory: It will help hibernate to connect database
step5: now perform crud operation
       you need todo all 5 steps to just perform CRUD operation

********************************************************************************************************************************************************************************************
So that is why introduced Spring boot

step1: create entity class
step2: create Repository
step3: create Service
step4: got to testing file perform CRUD operations and do unit testing (in rest api we use controller instead of testing file)
note @Test works on version 3.0.0
@Test: this annotation help us to run JUnit test automatically

@BeforeEach: it will run before each method
@AfterEach:  it will run after  each method
@BeforeAll:  it will run when spring boot starts (note only static method works)
@AfterAll:  it will run when spring boot starts (note only static method works)


Hibernate internally using HQL--->Hibernate query language
spring.jpa.properties.hibernate.show_sql=true   (prints query in terminal)

********************************************************************************************************************************************************************************************
finder query ?
when you want to perform query other than CRUD
note: use camelCase
like : Optional<User> findByEmail(String Email);
       or
       User findByEmail(String Email);

********************************************************************************************************************************************************************************************
JPQL (Java persistence query language)
JPQL: it is interact to entity(object) class not DB directly , then entity class interact to DB 

like: @Query("Select s from Student s where s.name=:x");
      Student searchByName (@Param("x"), String name):
                 |
              It is not case sensitive
********************************************************************************************************************************************************************************************
EntityManager: It will replace the use of Spring Data Jpa i.e. Spring repository
                you can use @EntityManager without creating repository
               
               EntityManager em;

               Stirng jpql = "Select s from s User where s.phoneNumber=:number");
	       TypedQuery<User> query = em.createQuery(jpql, User.class);
	       query.setParameter("number",String phoneNumber);
               query.getSingleresult();


********************************************************************************************************************************************************************************************
jsp(java server page / Jakarta server page )

///////////////step1 : add dependencies like jasper etc (pom.xml)////////////////////////////////////



<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.9</version> <!-- Update to a recent version -->
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.website_demo</groupId>
	<artifactId>website_demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>website_demo</name>
	<description>spring_boot_1</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>8</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<version>8.0.32</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/jstl/jstl -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>



////////////step 2: application.properies//////////// 

spring.datasource.url=jdbc:mysql://localhost:3307/db
spring.datasource.username=root
spring.datasource.password=%password%

spring.mvc.view.prefix=/WEB-INF/view/
spring.mvc.view.suffix=.jsp

spring.jpa.hibernate.ddl-auto=update

//////////step3: create entity////////////////


package com.project_two.entity;


@Entity
@Table(name = "Register")
public class Register {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(nullable = false)
    private Long id;

    private String name;
    private String email;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}


////////////////step4: create service//////////////

@Service
public class RegisterService {

    @Autowired
    private RegisterRepository registerRepository;
    public Register addUser(Register register) {

       return registerRepository.save(register);


    }
}


////////////////step5: create repository//////////////

public interface RegisterRepository extends JpaRepository<Register, Long> {
}


////////////////step6: create controller 

 @RequestMapping("/register")

    public String registerUser(Model model){

        return "register";

    }


//////////////step7: create jsp page

<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Spring Boot JSP with JSTL</title>
</head>
<body>
    <h1>Registration page</h1>
    <form method="post" action="/add">
        Name: <input type="text" name="name" placeholder="Enter name" /><br>
        Email: <input type="text" name="email" placeholder="Enter email" /><br>
        <button type="submit">Register</button>
    </form>
    <a href="view">view</a>
</body>
</html>

///////// OUTPUT////////////////////////////

Registration page
Name:--------- 

Email:--------

Register

    ***********************************************SPRING BOOT + HIBERNATE + JSP ENDED**************************************************************************************************



