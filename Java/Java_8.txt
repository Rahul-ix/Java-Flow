Java 8 TOPIC CHEAT SHEET


Functional Interface: 
-in the interface we annote interface with @FunctionalInterface it consist exactly one incomplete method and any number of complete method
-default/static: by using default/static keyword we can create complete method in interface/@FunctionalInterface
-@FunctnalInterface cannot do multiple inheritance



lamdas                           it is used single handle method /reduce no of lines code
                                 List<String> l=Arrays.asList("Ruhi","Abshire","Raj");
                                 l.forEach(name->System.out.println(name));

note : you can use lambda in ---->list,incomplete method(@FunctionalInterface),switch etc

       

.stream() (initlization)          it is like pipeline in that flow data one by one
.filter() (intermideate)          it will not execute code it's like lazy
.collect() (result)               it will execute code

predicate<T>                       it is like boolean,functional Interface,incomplete method,it filters record

                                  ex: Predicate<Integer> p=x->x%2==0;
                                      boolean val =p.test(10);
                                      sop(val); //true
Function<T,R>                     it is functional interface means exactly one incomplete method but any no: of interface
				  it takes input and produces exactly one output
								Function<Integer,Integer> data= x->x+2;
								long newData = data.apply(10);
								sop(newData);//12

.map()                         

                              it is used to transform elements in stream it is like it will do only operation not eliminates any elements unlike filter()
                              discount of 10% on each product
                              ex : 
                              
                              List<Integer> data = Arrays.asList(2000,3000,5000);
                              List<Integer> newData= data.stream()
                              .map(n->n-n/10)
                              .collect(Collectors.toList());
                              sop(newData)//[1800,2700,4500] 
                              
note : Predicate<T>-->boolean , Function<T,R>--> incomplete method, 
       filter()->filters data, map()->transfer elements into stream

 groupingBy()---->group based on your requirement
 .sort()---> sorting array
 .distinct()---->remove duplicates
 .max()---->find max value
 .min()---->find min value
 
 Consumer<String> c=message->sop(message);
 c.accept("hello");//it takes input but produces no output
 
 Supplier<T> s =()->Math.random();
 sop(s.get());//it takes no input but produces output
 
 .map(),.forEach(),collect()-->-->funtional interface
 .filter()predicate(boolean)
 .forEach()-->consumer