-----------------------------------------------------------------------Spring Security------------------------------------------------------------------------------------------------------

How to store encrypted password in DB?

step1: add oAuth dependencies

		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
			<version>2.5.1.RELEASE</version>
		</dependency>

step2:encrypt the password:

String enCryptedPassword=  BCrypt.hashpw(registartion.getPassword(),BCrypt.gensalt(5));

step3:decrypt the password:

boolean isPasswordMatch = BCrypt.checkpw(registrationDto.getPassword(), registartion.getPassword());


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Spring security with JWT

overview:-> -configure url
            -add application.properties
            -create JWTService--->CCIES and RIBVS
            -create JWTFilter

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

step1: add spring security dependencies and JWT depenencies , now by default all endpoints are secure

		<dependency>         
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

                <dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>4.4.0</version>
		</dependency>

note: make sure your spring boot is 3.0.0 because sometime spring security not work higher version
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


step2: create @Configuration class to add SecurityConfig now your url are not secure

@Configuration
public class SecurityConfig {


    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        //disables no-recommended
        http.csrf().disable().cors().disable();
        http.addFilterBefore(jwtFilter, AuthorizationFilter.class);

        http.authorizeHttpRequests().requestMatchers("/api/app/users").permitAll()
                .requestMatchers("/api/app/create").permitAll()
                .requestMatchers("/api/app/login").hasRole("ADMIN")
                .anyRequest().authenticated();

        return http.build();


        //allow http request
//        http.authorizeHttpRequests().anyRequest().permitAll();

    }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

step3: add properties in application.properties

jwt.issuer=com.rahul
jwt.expiry-time=86400000
jwt.secret-key=dkdnknNknKNknKNNn7567Rf7F7F7f7F772345678!@#$%^&*JbjBJbJb@#$%^BJbBjbKBBKBKbkbkbkbkb
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


step4: ///////////////////create JWTService ////////////////////////////////////


@Component
public class JWTService {

    @Value("${jwt.expiry-time}")
    private int expiryTime;

    @Value("${jwt.issuer}")
    private String issuer;

    @Value("${jwt.secret-key}")
    private String secretKey;

    private Algorithm algorithm;
    @PostConstruct
    public  void getConstruct(){
        algorithm = Algorithm.HMAC256(secretKey);

    }

    public String genetraeToken(String username){
        //CCIES
        return JWT.create()
                .withClaim("name",username)
                .withExpiresAt(new java.util.Date(System.currentTimeMillis()+expiryTime))
                .withIssuer(issuer)
                .sign(algorithm);

    }

    public String verifyUserToken(String token){
//RIBVS
        DecodedJWT decodedJWT =JWT.require(algorithm)
                .withIssuer(issuer)
                .build()
                .verify(token);

        String verifyToken= decodedJWT.getClaim("name").asString();
        return verifyToken;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

step6: ///////////////////create JWTFilter component add OnceperRequest operation ////////////////////////////////////
     @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {

       String token= request.getHeader("Authorization");
       if(token!=null && token.startsWith("Bearer ")){
          String jwttoken= token.substring(7,token.length());
         String name= jwtService.verifyUserToken(jwttoken);
        Optional<Registartion> OpverifyedName= registartionRepository.findByName(name);
        if(OpverifyedName.isPresent()){
            Registartion registartion =OpverifyedName.get();
            String role = registartion.getRole(); // Assuming you have a getRole() method in your Registartion class

            // Add "ROLE_" prefix to the role as expected by Spring Security
//            SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role);
            SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role);


            System.out.println(authority);

//            UsernamePasswordAuthenticationToken authenticationToken=
//                    new UsernamePasswordAuthenticationToken(registartion,null, Collections.singleton(new SimpleGrantedAuthority(registartion.getName())));

            UsernamePasswordAuthenticationToken authenticationToken =
                    new UsernamePasswordAuthenticationToken(registartion, null, Collections.singleton(authority));

            authenticationToken.setDetails(new WebAuthenticationDetails(request));
            SecurityContextHolder.getContext().setAuthentication(authenticationToken);

        }


       }

       filterChain.doFilter(request,response);
    }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//check here 
GET: http://localhost:8080/api/app/login

{
    "name":"Abhira",
    "password":"testing",
    "role":"ADMIN"
}


--------------------------------------------------------------spring security end----------------------------------------------------------------------------------------------------------

