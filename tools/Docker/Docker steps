Key Benefits of Docker
âœ… Portable â†’ Runs anywhere without setup issues.
âœ… Lightweight â†’ Uses fewer resources than virtual machines.
âœ… Fast Deployment â†’ Start an app instantly in any environment.
âœ… Easy Scaling â†’ Run multiple instances effortlessly.

------------------------------------------------
| AWS EC2 Instance (Virtual Machine)          |
| ------------------------------------------- |
| | Linux OS (Ubuntu, Amazon Linux, etc.)  | |  <-- ðŸŸ¢ OS layer to run Docker.
| |-----------------------------------------| |
| | Docker Engine (Bridge)                  | |  <-- ðŸŸ¢ Manages containers.
| |-----------------------------------------| |
| | Container 1 (Spring Boot App + JDK)     | |  <-- ðŸŸ¢ Runs the Java app.
| | Container 2 (Database - MySQL/Postgres) | |  <-- ðŸŸ¢ Stores application data.
| | Container 3 (Redis, Other Services)     | |  <-- ðŸŸ¢ Caching & microservices.
| ------------------------------------------- |
------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Installing Docker:
_________________________

For Amazon Linux use the following commands

Install Docker In Amazon Linux VM
____________________________
sudo yum update -y 
sudo yum install docker -y
sudo service docker start
sudo usermod -aG docker ec2-user
exit

Use this command to check version of docker installed
_____________________________________________________
docker -v


For practise pull the sample image from docker hub repository of pankaj sir academy: docker pull psait/pankajsiracademy:latest

For Practise pull docker official image: docker pull hello-world

Important Docker Commands
_______________________________________________________
docker pull : download docker image from hub

	docker pull [image-name]
	
docker run : run docker image - this will create container (Isolated Enviroment to run docker image- This is not a OSs)

	docker run [image-name / image-id]

docker ps :To display docker containers that are running 

	docker ps 
	
display stopped containers:

	docker ps -a 
	
docker stop :To Stop docker container 

	docker stop [container-id]
	
docker start : Start docker container 

	docker start [container-id]

docker rm : will remove stopped docker container 

	docker rm [contianer-id]

docker rmi : Will Remove docker image 

	docker rmi [image-name / image-id]
	

To remove all stopped containers and un-used docker images we can use below command 

		docker system prune -a


How to create Docker Image and run that to access from browser?
________________________________________________________________

run Docker Image from docker hub using the command

Docker run [image-name] - This command when executed we will not be able to access our container in browser because it requires port mapping.

As Container is running inside linux VM. We will have to map linux vm (host port) to container(Container port) this is called as port mapping. To do this perform the following

Docker run -p host-port:container-port [image-name]

Example: docker run -p 9090:9090 [image-name]

Example: docker run -d -p 9090:9090 [image-name] will run the container in background

Now you can access our application using the url http://public-ip:host-post(linux-vm)

Note
1. Enable Inbound rule in security group custom ip IPv4 anywhere with host port number.
2. If you run Multiple Containers in same linux vm then host port number should be different for every container
____________________________________________________________________________________

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

OVERALL RUN From Spring boot --->github---->EC2

-> Spring Boot: framework which is used to develop enterprise based applications.
-> Spring Boot applications will be packaged as a jar file for deployment. 
-> To run the jar file we will use command :  java -jar <file-name.jar>
-> To run springboot application jar file we will use tomcat server as "embedded server".
-> By default spring boot application will run on port number 8080

Step 1: Create Docker File

FROM openjdk:17

COPY target/demo-app.jar  /usr/app/

WORKDIR /usr/app/

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "demo-app.jar"]


Step 2: Note (Install maven and git in linux VM first)

1) Clone git repo in docker host machine (linux): git clone <http-url>

2) Point to project root folder: cd <app-name> and run to generate jar: mvn clean package

3) Create docker image and check that: 
-> docker build -t psait/pankajsiracademy:<tag> .
(
Here 
-> psait is username
-> repositoryname of docker hub
-> <tag> can
  a. prod-v1 or prod-v2v2 for production
  b. dev-v1 for development environment
  c. test-v1 for testing environment
  d. staging-v1 for staging environment
)
-> docker images 

4) run docker container: docker run -d -p 8080:8080 --name psa psait/your-app

5)See the image is running or not: docker ps

6) docker logs <container-id>

5) Access application URL in browser: http://public-ip:8080/


Steps to push docker image to docker hub
__________________________________________

-> login into docker hub account from bash

docker login
Enter username: psait
Enter password

-> push docker image
docker push psait/pankajsiracademy:<tag>


